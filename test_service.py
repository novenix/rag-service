#!/usr/bin/env python3
"""
Script de prueba para el servicio RAG.
Prueba los endpoints principales del servicio.
"""

import requests
import json
import time

# Configuraci√≥n del servicio
BASE_URL = "http://localhost:5000"

def test_health_check():
    """Prueba el endpoint de health check."""
    print("üîç Probando health check...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check exitoso: {data}")
            return True
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en health check: {e}")
        return False

def test_service_info():
    """Prueba el endpoint de informaci√≥n del servicio."""
    print("\nüîç Probando informaci√≥n del servicio...")
    try:
        response = requests.get(f"{BASE_URL}/api/info")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Info del servicio:")
            print(f"   - Tipo de retriever: {data.get('retriever_type')}")
            print(f"   - Documentos indexados: {data.get('documents_indexed')}")
            print(f"   - Total documentos: {data.get('total_documents')}")
            return True
        else:
            print(f"‚ùå Info del servicio fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en info del servicio: {e}")
        return False

def test_new_session():
    """Prueba la creaci√≥n de una nueva sesi√≥n."""
    print("\nüîç Probando creaci√≥n de sesi√≥n...")
    try:
        response = requests.post(f"{BASE_URL}/api/conversation/new", 
                               headers={'Content-Type': 'application/json'})
        if response.status_code == 200:
            data = response.json()
            session_id = data.get('session_id')
            print(f"‚úÖ Nueva sesi√≥n creada: {session_id}")
            return session_id
        else:
            print(f"‚ùå Creaci√≥n de sesi√≥n fall√≥: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error en creaci√≥n de sesi√≥n: {e}")
        return None

def test_rag_query(session_id=None):
    """Prueba una consulta RAG."""
    print(f"\nüîç Probando consulta RAG (sesi√≥n: {session_id})...")
    
    test_query = "¬øCu√°l es la misi√≥n de HistoriaCard?"
    
    payload = {
        "query": test_query,
        "top_k": 3
    }
    
    if session_id:
        payload["session_id"] = session_id
    
    try:
        response = requests.post(f"{BASE_URL}/api/rag/query",
                               headers={'Content-Type': 'application/json'},
                               json=payload)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ Consulta RAG exitosa:")
                print(f"   - Pregunta: {data.get('query')}")
                print(f"   - Respuesta: {data.get('response')[:100]}...")
                print(f"   - Session ID: {data.get('session_id')}")
                print(f"   - Documentos recuperados: {len(data.get('retrieved_documents', []))}")
                return data.get('session_id')
            else:
                print(f"‚ùå Consulta RAG fall√≥: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Consulta RAG fall√≥: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error en consulta RAG: {e}")
        return None

def test_conversation_history(session_id):
    """Prueba obtener el historial de conversaci√≥n."""
    if not session_id:
        print("\n‚ö†Ô∏è  No hay session_id para probar historial")
        return False
        
    print(f"\nüîç Probando historial de conversaci√≥n (sesi√≥n: {session_id})...")
    
    try:
        response = requests.post(f"{BASE_URL}/api/conversation/history",
                               headers={'Content-Type': 'application/json'},
                               json={"session_id": session_id})
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                history = data.get('history', [])
                print(f"‚úÖ Historial obtenido: {len(history)} mensajes")
                for i, msg in enumerate(history):
                    print(f"   {i+1}. {msg.get('role')}: {msg.get('content')[:50]}...")
                return True
            else:
                print(f"‚ùå Obtener historial fall√≥: {data.get('error')}")
                return False
        else:
            print(f"‚ùå Obtener historial fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en obtener historial: {e}")
        return False

def main():
    """Ejecuta todas las pruebas."""
    print("üöÄ Iniciando pruebas del servicio RAG...")
    print("=" * 50)
    
    # Prueba 1: Health check
    if not test_health_check():
        print("\n‚ùå El servicio no est√° disponible. Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:5000")
        return
    
    # Prueba 2: Info del servicio
    test_service_info()
    
    # Prueba 3: Nueva sesi√≥n
    session_id = test_new_session()
    
    # Prueba 4: Consulta RAG
    session_id = test_rag_query(session_id)
    
    # Prueba 5: Segunda consulta para probar historial
    if session_id:
        print(f"\nüîç Probando segunda consulta en la misma sesi√≥n...")
        test_rag_query(session_id)
    
    # Prueba 6: Historial de conversaci√≥n
    test_conversation_history(session_id)
    
    print("\n" + "=" * 50)
    print("üéâ Pruebas completadas!")

if __name__ == "__main__":
    main()